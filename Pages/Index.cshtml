@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<script type="text/javascript" src="/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    function disableUploadButton() {
        var btn = document.getElementById('Upload');
        btn.disabled = true;
        btn.value = 'Loading Image';
        btn.style.backgroundColor = "#6EDE00";
    }
</script>
<form enctype="multipart/form-data" method="post" onsubmit="disableUploadButton()">
<div class="cbn-header-container">
        <div class="cbn-header-content">
            <span class="cbn-header-content-title">Step 1: &nbsp;Select Image File</span>
            <input asp-for="FormFile" type="file">
        </div>
        <div class="cbn-header-content">
            <span class="cbn-header-content-title">Step 2: &nbsp;Select Settings</span>
            <table class="cbn-settings-table">
                <tr>
                    <td>Normalize:</td>
                    <td>
                        <input type="checkbox" name="Normalize" id="Normalize" asp-for="Normalize" value="true" checked="@Model.Normalize" />
                    </td>
                    <td>
                        <input type="text" size="5" name="NormalizeFactor" id="NormalizeFactor" asp-for="NormalizeFactor" value="@Model.NormalizeFactor" />
                    </td>
                </tr>
                <tr>
                    <td>Soften:</td>
                    <td>            
                        <input type="checkbox" name="Soften" id="Soften" asp-for="Soften" value="true" checked="@Model.Soften" />
                    </td>
                </tr>
                <tr>
                    <td>Clean:</td>
                    <td><input type="checkbox" name="Clean" id="Clean" asp-for="Clean" value="true" checked="@Model.Clean" /></td>
                </tr>
                <tr>
                    <td>Sim Distance:</td>
                    <td><input type="text" size="5" name="SimilarityDistance" id="SimilarityDistance" asp-for="SimilarityDistance" value="@Model.SimilarityDistance" /></td>
                </tr>
                @*<tr>
                    <td>Email Results:</td>
                    <td>
                        <input type="email" size="5" name="EmailAddress" id="EmailAddress" asp-for="EmailAddress" value="@Model.EmailAddress" />
                    </td>
                </tr>*@
                <tr>
                    <td>Debug Info:</td>
                    <td><input type="checkbox" name="ShowDebug" id="ShowDebug" asp-for="ShowDebug" value="true" checked="@Model.ShowDebug" /></td>
                </tr>
                @if (!String.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <tr>
                        <td>Error Message:</td>
                        <td><input type="checkbox" name="ShowDebug" id="ShowDebug" asp-for="ShowDebug" value="true" checked="@Model.ShowDebug" /></td>
                    </tr>
                }
            </table>    
        </div>
        <div class="cbn-header-content">
                <span class="cbn-header-content-title">Step 3: &nbsp;Upload</span>
                <input asp-page-handler="Upload" id="Upload" class="cbn-button-upload" type="submit" value="Upload" />
        </div>
</div>
</form>
<div class="cbn-images-wrapper">
    @if (Model.Original != null)
    {
        <table class="cbn-results-table">
            @if (Model.PdfBytes != null)
            {
                <tr>
                    <td>
                        Pdf:
                    </td>
                    <td>
                        <object width="400" height="400" data="@String.Format("data:application/pdf;base64,{0}", Convert.ToBase64String(Model.PdfBytes))"></object>
                    </td>
                </tr>
            }
            <tr>
                <td>
                    Color Palette:
                </td>
                <td>
                    @for (int i = 0; i < Model.TopColors.Count; i++)
                    {
                        <div style="background-color:#@Model.TopColors[i].StoredColor.ToHex().Remove(6,2)">@(i+1)</div>
                    }
                </td>
            </tr>
            <tr>
                <td>
                    Original:
                </td>
                <td>
                    <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.Original))">
                </td>
            </tr>
            @if (Model.NormalizedBytes != null)
            {
                <tr>
                      <td>
                          Normalized:
                    </td>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.NormalizedBytes))" />
                    </td>
                </tr>
            }
            @if (Model.SoftenedBytes != null)
            {       
                <tr>
                    <td>
                        Softened:
                    </td>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.SoftenedBytes))" />
                    </td>
                </tr>
            }
            @if (Model.PBCBytes != null)
            {
                <tr>
                    <td>
                        PBC:
                    </td>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.PBCBytes))" />
                    </td>
                </tr>
            }
            @if (Model.CleanedBytes != null)
            {
               <tr>
                    <td>
                        Cleaned:
                    </td>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.CleanedBytes))" />
                    </td>
                </tr>
            }
            @if (Model.OutlineBytes != null)
            {
                <tr>
                    <td>
                        Final:
                    </td>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.OutlineBytes))" />
                    </td>
                </tr>
            }
        </table>
    }
</div>



