@page
@model IndexModel
@{
    ViewData["Title"] = "Angry Elf Games";
}
<script type="text/javascript" src="/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript">
    function disableUploadButton() {
        var btn = document.getElementById('Upload');
        btn.disabled = true;
        btn.value = 'Loading Image';
        btn.style.backgroundColor = "#6EDE00";
    }

    function changeSubmitButton() {
        var btn = document.getElementById('Upload');
        btn.value = 'Upload and Process';
    }
    
    $(document).ready(function() {
        $("#cbnbuttoninformation").click(function(){
            var x = document.getElementById("cbn-information");
            var y = document.getElementById("cbnbuttoninformation");
            if (x.style.display === "none") {
                x.style.display = "block";
                y.value ="Hide Information";
            } else {
                x.style.display = "none";
                y.value ="Show Information";
            }
        }); 
    });
</script>
<form enctype="multipart/form-data" method="post" onsubmit="disableUploadButton()">
    <div class="cbn-header-container">
        <div class="cbn-header-content">
            <span class="cbn-header-content-title">Step 1: &nbsp;Select Image File</span>
            <input asp-for="FormFile" type="file" accept=".jpg,.jpeg,.png,.bmp" oninput="changeSubmitButton()" />
        </div>
        <div class="cbn-header-content">
            <span class="cbn-header-content-title">Step 2: &nbsp;Select Settings</span>
            <table class="cbn-settings-table">
                <tr>
                    <td>Normalize:</td>
                    <td>
                        <input type="checkbox" name="Normalize" id="Normalize" asp-for="Normalize" value="true" checked="@Model.Normalize" />
                    </td>
                </tr>
                <tr>
                    <td>Normalize Value:</td>
                    <td>
                        <input type="number" name="NormalizeFactor" id="NormalizeFactor" asp-for="NormalizeFactor" value="@Model.NormalizeFactor" />
                    </td>
                </tr>
                <tr>
                    <td>Soften:</td>
                    <td>            
                        <input type="checkbox" name="Soften" id="Soften" asp-for="Soften" value="true" checked="@Model.Soften" />
                    </td>
                </tr>
                <tr>
                    <td>Clean:</td>
                    <td><input type="checkbox" name="Clean" id="Clean" asp-for="Clean" value="true" checked="@Model.Clean" /></td>
                </tr>
                <tr>
                    <td>Sim Distance:</td>
                    <td><input type="number" name="SimilarityDistance" id="SimilarityDistance" asp-for="SimilarityDistance" value="@Model.SimilarityDistance" /></td>
                </tr>
                <tr>
                    <td>Color Count:</td>
                    <td><input type="number" name="ColorCount" id="ColorCount" asp-for="ColorCount" value="@Model.ColorCount" /></td>
                </tr>
                @*<tr>
                    <td>Email Results:</td>
                    <td>
                        <input type="email" size="5" name="EmailAddress" id="EmailAddress" asp-for="EmailAddress" value="@Model.EmailAddress" />
                    </td>
                </tr>*@
                @*<tr>
                    <td>Quick Numbering:</td>
                    <td>
                        <input type="checkbox" name="QuickNumbering" id="QuickNumbering" asp-for="QuickNumbering" value="true" checked="@Model.QuickNumbering" />
                    </td>
                </tr>*@
                <tr>
                    <td>Outline Darkness:</td>
                    <td>
                        <input type="number" name="OutlineDarkness" id="OutlineDarkness" asp-for="OutlineDarkness" checked="@Model.OutlineDarkness" />
                    </td>
                </tr>
                <tr>
                    <td>Resize First:</td>
                    <td>
                        <input type="checkbox" name="Resize" id="Resize" asp-for="Resize" value="true" checked="@Model.Resize" />
                    </td>
                </tr>
                <tr>
                    <td>Debug Info:</td>
                    <td><input type="checkbox" name="ShowDebug" id="ShowDebug" asp-for="ShowDebug" value="true" checked="@Model.ShowDebug" /></td>
                </tr>
                @if (!String.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <tr>
                        <td>Error Message:</td>
                        <td>@Model.ErrorMessage</td>
                    </tr>
                }
            </table>    
        </div>
        <div class="cbn-header-content">
            <input type="hidden" id="OriginalImage" name="OriginalImage" asp-for="OriginalImage" value="@Model.OriginalImage" />
            <input type="hidden" id="FileName" name="FileName" asp-for="FileName" value="@Model.FileName" />
            <span class="cbn-header-content-title">Step 3: &nbsp;Process</span>
            @if (!String.IsNullOrEmpty(Model.OriginalImage))
            {
                <input asp-page-handler="Upload" id="Upload" class="cbn-button-upload" type="submit" value="Reprocess Image" />
            }
            else
            {
                <input asp-page-handler="Upload" id="Upload" class="cbn-button-upload" type="submit" value="Upload and Process" />
            }
        </div>
    </div>
</form>
<div class="cbn-button-panel">
    <input id="cbnbuttoninformation" class="cbn-button-information" type="button" value="Show Information" />
</div>
<div id="cbn-information" class="cbn-information" style="display:none;">
    <p>
        <b>Info about each of the options:</b>
    </p>
    <p>
        <b>Normalize -</b> This will round each RGB value to the nearest <i>N</i> value specified (eg 57, 123, 245 rounded to nearest 50 will result in 50, 100, 250).<br />
                    This slightly alters each color present, but allows the algorithm to have a smaller selection of colors to choose from. Range is 0 - 255. Default is 50 and off.
    </p>
    <p>
        <b>Soften -</b> This will go through pixel by pixel and round each pixel to the average of its neighbors.<br />
                 This results in a slightly blurred image with the goal of allowing the algorithm to again have a smaller selection of colors to choose from. Default is off.
    </p>
    <p>
        <b>Clean -</b> A quick algorithm that goes through and removes any insignificant areas of color (ie color areas that are smaller than 4 pixels).<br />
            Default is on.
    </p>
    <p>
        <b>Sim Distance -</b> AKA Similarity Distance is the value used to determine whether two colors are similar. The lower the number the more similar colors must be as determined by their CIELAB color.<br />
                   Lower this number if you want more colors, raise it if you want want fewer. Range is 0 - 100. Default is 28.0.
    </p>
    <p>
        <b>Color Count -</b> The maximum number of colors that you'd like to paint with.<br />
                Default is 25.
    </p>
    @*<p>
        <b>Quick Numbering -</b> When ON it will do a quicker numbering algorithm, putting numbers everywhere. When off it does a longer algorithm that finds each region and places a single number there.<br />
                   Default is on.
    </p>*@
    <p>
        <b>Outline Darkness -</b> Lower this number for lighter lines, raise for darker lines and numbers. Range is 0 - 255. <br />
                    Default is 64.
    </p>
    <p>
        <b>Resize First -</b> This will resize the image to it's final size before calculations (Final size is scaled to fit a 720px x 960px pdf document).<br />
                   On means a faster calculation, but less detailed result. Default is on.
    </p>
    <p>
        <b>Debug Info -</b> Slightly misleading as this doesn't really provide any true debug info. If on, it will return all the different stages instead of just the original, and final result (eg it will also return the Normalized image if on).<br />
        Default is off.
    </p>
</div>
<div class="cbn-images-wrapper">
    @if (Model.Original != null)
    {
        <table class="cbn-results-table">
            <tr>
                <td>
                    <a href="@String.Format("data:application/pdf;base64,{0}", Model.PdfDocument)" download="@Model.FileName" class="cbn-pdf-lnk">
                        <img src="~/img/pdf-dnload.png" alt="" width="40px;" />
                        Download PDF
                    </a>
                    <form method="post">
                        <img src="~/img/pdf-dnload.png" alt="" width="40px;" class="cbn-mobilepdf-image"/>
                        <input type="hidden" name="PdfDocument" id="PdfDocument" asp-for="PdfDocument" value="@Model.PdfDocument"/>
                        <input asp-page-handler="Download" type="submit" value="Download PDF" class="cbn-mobilepdf-button" />
                    </form>
                </td>
            </tr>
            @if (Model.ShowDebug)
            {
                <tr><td>Color Palette:</td></tr>
                <tr>
                    <td>
                        @for (int i = 0; i < Model.TopColors.Count; i++)
                        {
                            <div style="background-color:#@Model.TopColors[i].StoredColor.ToHex().Remove(6,2)">@(i+1)</div>
                        }
                    </td>
                </tr>
            }
            <tr><td>Original:</td></tr>
            <tr>
                <td>
                    <img class="cbn-image-max" id="myimage" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.Original))">
                </td>
            </tr>
            @if (Model.NormalizedBytes != null)
            {
                <tr><td>Normalized:</td></tr>
                <tr>
                    <td>
                        <div class="img-magnifier-container"><img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.NormalizedBytes))" /></div>
                    </td>
                </tr>
            }
            @if (Model.SoftenedBytes != null)
            {       
                <tr><td>Softened:</td></tr>
                <tr>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.SoftenedBytes))" />
                    </td>
                </tr>
            }
            @if (Model.PBCBytes != null)
            {
                <tr><td>PBC:</td></tr>
                <tr>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.PBCBytes))" />
                    </td>
                </tr>
            }
            @if (Model.CleanedBytes != null)
            {
               <tr><td>Cleaned:</td></tr>
                <tr>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.CleanedBytes))" />
                    </td>
                </tr>
            }
            @if (Model.OutlineBytes != null)
            {
                <tr><td>Final:</td></tr>
                <tr>
                    <td>
                        <img class="cbn-image-max" src="@String.Format("data:image/png;base64,{0}", Convert.ToBase64String(Model.OutlineBytes))" />
                    </td>
                </tr>
            }
        </table>
    }
</div>


